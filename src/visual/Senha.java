/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package visual;


import ModeloBeans.ClienteBeans;
import ModeloBeans.ContaBeans;
import ModeloBeans.ExtratoBeans;
import ModeloConex√£o.ConexaoBD;
import ModeloDAO.ContaDAO;
import ModeloDAO.ExtratoDAO;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.util.Date;
import java.text.SimpleDateFormat;
public class Senha extends javax.swing.JFrame {

     ConexaoBD conex = new ConexaoBD();
     ContaBeans cb = new ContaBeans();
     ContaDAO control = new ContaDAO();
     ExtratoDAO ed = new ExtratoDAO();
     ExtratoBeans eb = new ExtratoBeans();
     
    public Senha() {
        initComponents();
        conex.conectar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        jLabel6.setText("jLabel6");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 153, 0));

        jLabel2.setFont(new java.awt.Font("Simplifica", 0, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("UEMABANK");

        jLabel3.setForeground(new java.awt.Color(0, 153, 0));
        jLabel3.setText("jLabel3");

        jLabel4.setForeground(new java.awt.Color(0, 153, 0));
        jLabel4.setText("jLabel4");

        jLabel11.setBackground(new java.awt.Color(255, 255, 255));
        jLabel11.setFont(new java.awt.Font("Simplifica", 0, 24)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 153, 0));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setOpaque(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jLabel3)
                .addGap(73, 73, 73)
                .addComponent(jLabel2)
                .addGap(38, 38, 38)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel11)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel4))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel3)
                        .addComponent(jLabel11)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Simplifica", 0, 24)); // NOI18N
        jLabel1.setText("Digite a senha:");

        jLabel8.setBackground(new java.awt.Color(0, 153, 0));
        jLabel8.setFont(new java.awt.Font("Simplifica", 0, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Pronto");
        jLabel8.setOpaque(true);
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel8MousePressed(evt);
            }
        });

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("jLabel5");

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("jLabel7");

        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("jLabel9");

        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("jLabel10");

        jLabel12.setBackground(new java.awt.Color(0, 153, 0));
        jLabel12.setFont(new java.awt.Font("Simplifica", 0, 24)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Cancelar");
        jLabel12.setOpaque(true);
        jLabel12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel12MousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                        .addComponent(jLabel10))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel7)
                .addGap(7, 7, 7)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(2, 2, 2)))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel8MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MousePressed
        // Botao pronto
        if(jLabel5.getText().equals("Extrato")){
            try {
                conex.executaSql("select * from conta where card_code='"+jLabel4.getText()+"'");
                conex.rs.first();
                if (conex.rs.getString("senha").equals(jTextField1.getText())){
                    extrato jnext = new extrato();
                    jnext.jLabel1.setText(jLabel4.getText());
                    jnext.setVisible(true);
                    dispose();
                }
            } catch (SQLException ex) {
                Logger.getLogger(Senha.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
         
         if(jLabel5.getText().equals("Transferencia")){ // tipo de a√ß√£o feita
             try {
                 conex.executaSql("select * from conta where card_code='"+jLabel4.getText()+"'");
                 conex.rs.first();
                 if (conex.rs.getString("senha").equals(jTextField1.getText())){
                     if(jLabel7.getText().equals("Corrente")){ // tipo de conta em que realiza transferencia
                         if(jLabel9.getText().equals("Corrente")){ // tipo de transferencia escolhida
                            conex.executaSql("select * from conta where card_code ='"+jLabel10.getText()+"'");
                            conex.rs.first();
                            if (conex.rs.getInt("corrente") == 1){ // verificando se usuario possui conta corrente
                            cb.setPesquisa(jLabel4.getText());
                            ContaBeans model = control.buscarSaldoCo(cb);
                            Double total = cb.setSaqueCo(model.getSaldo_corrente(), Double.parseDouble(jLabel3.getText()));
                                if(total < 0){
                                JOptionPane.showMessageDialog(null,"Saldo insuficiente para realizar a transfer√™ncia!");
                                dispose();
                                return;                 
                                }
                                                                                          
                            cb.setSaldo_corrente(total);
                            cb.setCard_code(jLabel4.getText());
                            control.DepositarCo(cb);
                            eb.setCardcode(jLabel4.getText());
                            eb.setA√ß√£o("Transferencia de corrente para corrente-"+jLabel10.getText());
                            
                            cb.setPesquisa(jLabel10.getText());
                            ContaBeans model2 = control.buscarSaldoCo(cb);
                            Double total2 = cb.setDepositarCo(model2.getSaldo_corrente(), Double.parseDouble(jLabel3.getText()));
                            cb.setSaldo_corrente(total2);
                            cb.setCard_code(jLabel10.getText());
                            control.DepositarCo(cb);
                            eb.setCardcode(jLabel4.getText());
                            eb.setA√ß√£o("Transferencia de corrente para corrente-"+jLabel10.getText());
                            Date data = new Date();
                            SimpleDateFormat formatador = new SimpleDateFormat("dd/MM/yyyy");
                            eb.setDat(formatador.format(data));
                            eb.setValor(Double.parseDouble(jLabel3.getText()));
                            ed.CadastrarExtrato(eb);
                            
                            }else{
                                JOptionPane.showMessageDialog(null, "Este usu√°rio n√£o possui conta corrente!");
                            }
                         }
                         if(jLabel9.getText().equals("Poupanca")){ // tipo de transferencia escolhida
                            conex.executaSql("select * from conta where card_code ='"+jLabel10.getText()+"'");
                            conex.rs.first();
                            if(conex.rs.getInt("poupanca") == 1){// verificando se usuario possui conta poupanca
                            cb.setPesquisa(jLabel4.getText());
                            ContaBeans model = control.buscarSaldoCo(cb);
                            Double total = cb.setSaqueCo(model.getSaldo_corrente(), Double.parseDouble(jLabel3.getText()));
                                if(total < 0){
                                JOptionPane.showMessageDialog(null,"Saldo insuficiente para realizar a transfer√™ncia!");
                                dispose();
                                return;                 
                                }
                            cb.setSaldo_corrente(total);
                            cb.setCard_code(jLabel4.getText());
                            control.DepositarCo(cb);
                            
                            cb.setPesquisa(jLabel10.getText());
                            ContaBeans model1 = control.buscarSaldoPo(cb);
                            Double total1 = cb.setDepositarPo(model1.getSaldo_poupanca(), Double.parseDouble(jLabel3.getText()));
                            cb.setSaldo_poupanca(total1);
                            cb.setCard_code(jLabel10.getText());
                            control.DepositarPo(cb);
                            eb.setCardcode(jLabel4.getText());
                            eb.setA√ß√£o("Transferencia de corrente para poupan√ßa-"+jLabel10.getText());
                            Date data = new Date();
                            SimpleDateFormat formatador = new SimpleDateFormat("dd/MM/yyyy");
                            eb.setDat(formatador.format(data));
                            eb.setValor(Double.parseDouble(jLabel3.getText()));
                            ed.CadastrarExtrato(eb);                           
                            }else{
                             JOptionPane.showMessageDialog(null, "Este usu√°rio n√£o possui conta poupan√ßa!");

                         }
                     }
                     }
                     if(jLabel7.getText().equals("Poupan√ßa")){   // tipo de conta em que realiza transferencia
                         if(jLabel9.getText().equals("Corrente")){ // tipo de transferencia escolhida
                            conex.executaSql("select * from conta where card_code ='"+jLabel10.getText()+"'");
                            conex.rs.first();
                            if (conex.rs.getInt("corrente") == 1){ // verificando se usuario possui conta corrente
                            cb.setPesquisa(jLabel4.getText());
                            ContaBeans model = control.buscarSaldoPo(cb);
                            Double total = cb.setSaquePo(model.getSaldo_poupanca(), Double.parseDouble(jLabel3.getText()));
                                if(total < 0){
                                JOptionPane.showMessageDialog(null,"Saldo insuficiente para realizar a transfer√™ncia!");
                                dispose();
                                return;                 
                                }
                            cb.setSaldo_poupanca(total);
                            cb.setCard_code(jLabel4.getText());
                            control.DepositarPo(cb);
                            
                            cb.setPesquisa(jLabel10.getText());
                            ContaBeans model2 = control.buscarSaldoCo(cb);
                            Double total2 = cb.setDepositarCo(model2.getSaldo_corrente(), Double.parseDouble(jLabel3.getText()));
                            cb.setSaldo_corrente(total2);
                            cb.setCard_code(jLabel10.getText());
                            control.DepositarCo(cb);
                            eb.setCardcode(jLabel4.getText());
                            eb.setA√ß√£o("Transferencia de poupan√ßa para corrente-"+jLabel10.getText());
                            Date data = new Date();
                            SimpleDateFormat formatador = new SimpleDateFormat("dd/MM/yyyy");
                            eb.setDat(formatador.format(data));
                            eb.setValor(Double.parseDouble(jLabel3.getText()));
                            ed.CadastrarExtrato(eb);                           
                         }else{
                            JOptionPane.showMessageDialog(null, "Este usu√°rio n√£o possui conta corrente!");

                            }
                         }
                         if(jLabel9.getText().equals("Poupanca")){ // tipo de transferencia escolhida
                            conex.executaSql("select * from conta where card_code ='"+jLabel10.getText()+"'");
                            conex.rs.first();
                            if(conex.rs.getInt("poupanca") == 1){// verificando se usuario possui conta poupanca
                            cb.setPesquisa(jLabel4.getText());
                            ContaBeans model = control.buscarSaldoPo(cb);
                            Double total = cb.setSaquePo(model.getSaldo_poupanca(), Double.parseDouble(jLabel3.getText()));
                                if(total < 0){
                                JOptionPane.showMessageDialog(null,"Saldo insuficiente para realizar a transfer√™ncia!");
                                dispose();
                                return;                 
                                }
                            cb.setSaldo_poupanca(total);
                            cb.setCard_code(jLabel4.getText());
                            control.DepositarPo(cb);
                            
                            cb.setPesquisa(jLabel10.getText());
                            ContaBeans model1 = control.buscarSaldoPo(cb);
                            Double total1 = cb.setDepositarPo(model1.getSaldo_poupanca(), Double.parseDouble(jLabel3.getText()));
                            cb.setSaldo_poupanca(total1);
                            cb.setCard_code(jLabel10.getText());
                            control.DepositarPo(cb);
                            eb.setCardcode(jLabel4.getText());
                            eb.setA√ß√£o("Transferencia de poupan√ßa para poupan√ßa-"+jLabel10.getText());
                            Date data = new Date();
                            SimpleDateFormat formatador = new SimpleDateFormat("dd/MM/yyyy");
                            eb.setDat(formatador.format(data));
                            eb.setValor(Double.parseDouble(jLabel3.getText()));
                            ed.CadastrarExtrato(eb);
    
                         }else{
                            JOptionPane.showMessageDialog(null, "Este usu√°rio n√£o possui conta poupan√ßa!");
                             }
                          }
                     }
                 }else{
                    JOptionPane.showMessageDialog(null, "Senha inv√°lida");
                    
                         }
               } catch (SQLException ex) {
                 Logger.getLogger(Senha.class.getName()).log(Level.SEVERE, null, ex);
             }
          }
         
        
         if(jLabel5.getText().equals("Saque")){
         try {
             conex.executaSql("select * from conta where card_code='"+jLabel4.getText()+"'");
             conex.rs.first();
             if (conex.rs.getString("senha").equals(jTextField1.getText())){
                 if(jLabel7.getText().equals("Corrente")){
                 cb.setPesquisa(jLabel4.getText());
                 ContaBeans model = control.buscarSaldoCo(cb);
                 Double total = cb.setSaqueCo(model.getSaldo_corrente(), Double.parseDouble(jLabel3.getText()));
                 if(total < 0){
                     JOptionPane.showMessageDialog(null,"Saldo insuficiente para realizar o saque!");
                     dispose();
                     return;                 
                 }
                 cb.setSaldo_corrente(total);
                 cb.setCard_code(jLabel4.getText());
                 control.DepositarCo(cb);
                 JOptionPane.showMessageDialog(null, jLabel3.getText()+" Foi sacado da conta Corrente!");
                 eb.setA√ß√£o("Saque-Corrente");
                 eb.setCardcode(jLabel4.getText());
                 Date data = new Date();
                 SimpleDateFormat formatador = new SimpleDateFormat("dd/MM/yyyy");
                 eb.setDat(formatador.format(data));
                 eb.setValor(Double.parseDouble(jLabel3.getText()));
                 ed.CadastrarExtrato(eb);
                 
                 
                 }
                if(jLabel7.getText().equals("Poupan√ßa")){
                       cb.setPesquisa(jLabel4.getText());
                       ContaBeans model = control.buscarSaldoPo(cb);
                       Double total = cb.setSaquePo(model.getSaldo_poupanca(), Double.parseDouble(jLabel3.getText()));
                       if(total < 0){
                           JOptionPane.showMessageDialog(null,"Saldo insuficiente para realizar o saque!");
                           dispose();
                           return;                 
                       }
                       cb.setSaldo_poupanca(total);
                       cb.setCard_code(jLabel4.getText());
                       control.DepositarPo(cb);  
                       eb.setA√ß√£o("Saque-Poupan√ßa");
                       eb.setCardcode(jLabel4.getText());
                       Date data = new Date();
                       SimpleDateFormat formatador = new SimpleDateFormat("dd/MM/yyyy");
                       eb.setDat(formatador.format(data));
                       eb.setValor(Double.parseDouble(jLabel3.getText()));
                       ed.CadastrarExtrato(eb);
                       JOptionPane.showMessageDialog(null, jLabel3.getText()+" Foi sacado da conta Poupan√ßa!");

                       
                 }
                 
             }else{
                 JOptionPane.showMessageDialog(null, "Senha inv√°lida");
             }
             
         } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Erro: "+ex);
           }
         }
         
        if(jLabel5.getText().equals("Recarga")){
             try {
                 conex.executaSql("select * from conta where card_code='"+jLabel4.getText()+"'");
                 conex.rs.first();
                 if (conex.rs.getString("senha").equals(jTextField1.getText())){
                     cb.setPesquisa(jLabel4.getText());
                     ContaBeans model = control.buscarSaldoCo(cb);
                     Double total = cb.setSaqueCo(model.getSaldo_corrente(), Double.parseDouble(jLabel3.getText()));
                        if(total < 0){
                        JOptionPane.showMessageDialog(null,"Saldo insuficiente para realizar a recarga!");
                        dispose();
                        return;                 
                        }
                     cb.setSaldo_corrente(total);
                     cb.setCard_code(jLabel4.getText());
                     control.DepositarCo(cb);
                     
                     eb.setCardcode(jLabel4.getText());
                     eb.setA√ß√£o("Recarga - "+jLabel10.getText());
                     Date data = new Date();
                     SimpleDateFormat formatador = new SimpleDateFormat("dd/MM/yyyy");
                     eb.setDat(formatador.format(data));
                     eb.setValor(Double.parseDouble(jLabel3.getText()));
                     ed.CadastrarExtrato(eb);
                     JOptionPane.showMessageDialog(null,"Recarga Feita com sucesso no numero "+jLabel3.getText());

                 }
             } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Erro: "+ex);
             }
        }
        
        if(jLabel5.getText().equals("Saldo")){
             try {
                 conex.executaSql("select * from conta where card_code='"+jLabel4.getText()+"'");
                 conex.rs.first();
                 if (conex.rs.getString("senha").equals(jTextField1.getText())){
                     saldo jnext = new saldo();
                     jnext.jLabel9.setText(jLabel4.getText());
                     jnext.jLabel3.setText(jLabel7.getText());                     
                     jnext.setVisible(true);
                     dispose();
                 }

             } catch (SQLException ex) {
                 Logger.getLogger(Senha.class.getName()).log(Level.SEVERE, null, ex);
             }

        }
            
        dispose();
    }//GEN-LAST:event_jLabel8MousePressed

    private void jLabel12MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel12MousePressed
        //Bot√£o cancelar
        JOptionPane.showMessageDialog(null, "Opera√ß√£o Cancelada!");
        dispose();
    }//GEN-LAST:event_jLabel12MousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Senha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Senha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Senha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Senha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Senha().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    public javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    public javax.swing.JLabel jLabel3;
    public javax.swing.JLabel jLabel4;
    public javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    public javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    public javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    class jLabel3 {

        public jLabel3() {
        }
    }

    class jLabel7 {

        public jLabel7() {
        }
    }

    class jLabel13 {

        public jLabel13() {
        }
    }
}
